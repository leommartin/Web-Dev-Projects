// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar uma migration: yarn prisma migrate dev
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   
  password  String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("users")
}

model Category {
  id String @id @default(uuid())
  name String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("categories")

  // Uma categoria pode ter muitos produtos (relacionamento 1:N)
  products Product[]
}

model Product {
  id String @id @default(uuid())
  name String
  price String
  description String 
  banner String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  // Uma categoria pode ter muitos produtos (relacionamento 1:N)
  // Aqui criamos uma coluna category_id que referencia a tabela 'categories'
  category Category @relation(fields: [category_id], references: [id])

  @@map("products")
  category_id String
  items Item[] // um produto pode estar dentro de v√°rios itens (relacionamento 1:N)
}

model Order{
  id String @id @default(uuid())
  table Int
  status Boolean @default(false)
  draft Boolean @default(true)
  name String? // opcional  
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("orders") 
  items Item[] // Um pedido pode ter muitos itens (relacionamento 1:N)
}

model Item{
  id String @id @default(uuid())
  amount Int // quantidade do produto
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  // Um pedido pode ter muitos itens (relacionamento 1:N)
  // Criamos um order_id que referencia id's da tabela 'orders'
  // Criamos um product_id que referencia id's da tabela 'products'
  order Order @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("items")
  order_id String
  product_id String
}
